     1                                  ;Problema: Se da un sir de valori numerice intregi reprezentate pe quadworduri
     2                                  ;Sa se determine suma cifrelor numarului multiplilor de 8 din sirul de octetilor
     3                                  ;inferiori ai cuvintelor superioare ai dublucuvintelor superioare din elemenetele sirului de quadworduri. 
     4                                  
     5                                  ;Solutie: Parcurgand sirul de quadworduri vom obtine intai numarul multiplilor de 8 din
     6                                  ;sirul octetilor inferiori ai cuvintelor superioare ai dublucuvintelor superioare din elementele sirului. Apoi vom obtine
     7                                  ;cifrele acestui numar prin impartiri succesive la 10 si vom calcula suma lor 
     8                                  bits 32 ; assembling for the 32 bits architecture
     9                                  
    10                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
    11                                  global start        
    12                                  
    13                                  ; declare external functions needed by our program
    14                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    15                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    16                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    17                                  
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20                                      ; ...
    21 00000000 B0BC0A1110311200D2-         sir dq 123110110abcb0h, 1116adcb5a051ad2h, 4120ca11d730cbb0h ;sirul initial
    21 00000009 1A055ACBAD1611B0CB-
    21 00000012 30D711CA2041       
    22                                      len equ ($-sir)/8 ;lungimea sirului (in quadwords)
    23 00000018 08                          opt db 8 ;variabila folosita pentru testarea divizibilitatii cu 8
    24 00000019 0A000000                    zece dd 10 ;variabila folosita pentru determinarea cifrelor unui numar prin impartiri succesive la 10
    25 0000001D 00000000                    suma dd 0 ;variabila in care retinem suma cifrelor
    26                                  
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31 00000000 BE[00000000]                    mov esi, sir
    32 00000005 FC                              cld ;parcurgem sirul de la stanga la dreapta (DF = 0)
    33 00000006 B903000000                      mov ecx, len ;vom parcurge elementele sirului intr-o bucla loop cu len iteratii
    34 0000000B BB00000000                      mov ebx, 0 ;in ebx vom retine numarul multiplilor de 8
    35                                          repeta:
    36 00000010 AD                                  lodsd ;in eax vom avea dublucuvantul mai putin semnificativ al quadword-ului curent
    37 00000011 AD                                  lodsd ;in eax vom avea dublucuvantul cel mai semnificativ al quadword-ului curent din sir
    38 00000012 C1E810                              shr eax, 16
    39 00000015 B400                                mov ah, 0 ;ne intereseaza doar octetul mai putin semnificativ din acest cuvant (AL)
    40 00000017 F635[18000000]                      div byte[opt] ;vedem daca al este divizibil cu 8
    41 0000001D 80FC00                              cmp ah, 0 ;daca restul nu este 0, reluam ciclul repeta
    42                                                        ; Altfel incrementam numarul multiplilor de 8 din ebx
    43 00000020 7501                                jnz nonmultiplu
    44 00000022 43                                  inc ebx
    45                                              
    46                                              nonmultiplu:
    47 00000023 E2EB                            loop repeta ;daca mai sunt elemente de parcurs (ecx > 0) reia ciclul
    48                                          
    49                                          
    50                                          ;mai departe, obtinem cifrele numarului ebx in baza 10 prin impartiri succesive la 10 si calculam suma acestor cifre
    51                                          
    52 00000025 89D8                            mov eax, ebx
    53 00000027 BA00000000                      mov edx, 0
    54                                          
    55                                          transf:
    56 0000002C F735[19000000]                      div dword[zece] ;impartim la 10 numarul din registrul edx:eax ca sa aflam ultima cifra, aceasta cifra se afla in EDX
    57 00000032 0115[1D000000]                      add dword[suma], edx ;adunam cifra la suma
    58 00000038 83F800                              cmp eax, 0
    59 0000003B 7407                            jz sfarsit ;daca catul este 0 inseamna ca am obtinut toate cifrele si putem parasi bucla transf
    60                                                     ;Altfel, il pregatim pentru o noua iteratie
    61 0000003D BA00000000                      mov edx, 0
    62 00000042 EBE8                            jmp transf ;reluam bucla pentru obtinerea unei noi cifre
    63                                          
    64                                      sfarsit: ;aici se incheie programul
    65                                      
    66                                          ; exit(0)
    67 00000044 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 00000046 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
