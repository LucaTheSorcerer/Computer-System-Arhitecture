     1                                  ;Programul de mai jos va calcula rezultatul unor operatii aritmetice in registrul eax, va salva valoarea registrilor, apoi va afisa valoarea rezultatului si va restaura valoarea registrilor
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global start        
     6                                  
     7                                  ; declare external functions needed by our program
     8                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16                                      ; sirurile de caractere sunt de tip byte
    17 00000000 256400                      format db "%d", 0 ;%d <=> un numar decimal (baza 10)
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          ;vom calcula 20 + 123 + 7 in EAX
    24 00000000 B814000000                      mov eax, 20
    25 00000005 83C07B                          add eax, 123
    26 00000008 83C007                          add eax, 7 ;eax = 150 in baza 10
    27                                          
    28                                          ;salvam valoarea registrilor deoarece apelul functiei sistem printf va modifica valoarea acestora
    29                                          ;folosim instructiunea PUSHAD care salveaza pe stiva valorile mai multor registrii printre care EAX, ECX, EDX si EBX
    30                                          ; in acest exemplu este important sa salvam doar valorea registrului EAX, dar instructiunea poate fi aplicata generic
    31 0000000B 60                              PUSHAD
    32                                          
    33                                          ;vom apela print(format, eax) => vom afisa valoarea in eax
    34                                          ;punem parametrii pe stiva de la dreapta la stanga
    35 0000000C 50                              push dword eax
    36 0000000D 68[00000000]                    push dword format
    37 00000012 FF15[00000000]                  call [printf]
    38 00000018 83C408                          add esp, 4 * 2
    39                                          
    40                                          ;dupa apelul functiei printf registrul eax are o valoare setata de aceasta functie (nu valorea 150 pe care am calculat-o la inceputul programului)
    41                                          ;restauram valoarea registrilor salvati pe stiva la apelul instructiunii PUSHAD folosind instructiunea POPAD
    42                                          ;aceasta instructiune ia valori de pe stiva si le completeaza in mai multi registrii printr care EAX, ECX, EDX si EBX
    43                                          ;este important ca inaintea unui apel al instructiunii POPAD sa ne asiguram ca exista suficiente valori
    44                                          ;pe stiva pentru a fi incarcat in registrii
    45                                          
    46 0000001B 61                              POPAD
    47                                          
    48                                          ;acum valorea registrului eax a fost restaurata la valorea de dinaintea apelului instructiunii PUSHAD 
    49                                      
    50                                          ; exit(0)
    51 0000001C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    52 0000001E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
