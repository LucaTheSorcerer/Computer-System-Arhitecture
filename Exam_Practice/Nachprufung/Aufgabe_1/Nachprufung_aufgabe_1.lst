     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 706572736F6E616C5F-         file_name db "personal_data.txt", 0
    18 00000009 646174612E74787400 
    19 00000012 7200                        acces_mode db "r", 0
    20 00000014 FFFFFFFF                    file_descriptor dd -1
    21                                      len equ 100
    22 00000018 00<rept>                    text times (len + 1) db 0
    23                                  
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28                                          ;folosim functia fopen pentru a deschide fisierul personal_data.txt
    29                                          ;in eax vom avea file_descriptor-ul fisierului
    30                                          ;eax = fopen(file_name, acces_mode)
    31 00000000 68[12000000]                    push dword acces_mode
    32 00000005 68[00000000]                    push dword file_name
    33 0000000A FF15[00000000]                  call [fopen]
    34 00000010 83C408                          add esp, 4 * 2
    35                                          
    36 00000013 83F800                          cmp eax, 0
    37 00000016 742B                            je final
    38                                          
    39 00000018 A3[14000000]                    mov [file_descriptor], eax
    40                                          
    41                                          ;folosim functia fread pentru a citi continutul fisierului
    42                                          ;fread(text, 1, len, file_descriptor)
    43                                          ;in eax va fi stocat numarul de caractere citite
    44 0000001D FF35[14000000]                  push dword [file_descriptor]
    45 00000023 6A64                            push dword len
    46 00000025 6A01                            push dword 1
    47 00000027 68[18000000]                    push dword text
    48 0000002C FF15[00000000]                  call [fread]
    49 00000032 83C410                          add esp, 4 * 4
    50                                          
    51                                          ;folosim functia printf pentru a arata pe ecran continutul din variabila text
    52                                          ;printf(text)
    53 00000035 68[18000000]                    push dword text
    54 0000003A FF15[00000000]                  call [printf]
    55 00000040 83C404                          add esp, 4
    56                                          
    57                                          
    58                                      final:
    59                                          ;folosim functia fclose pentru a inchide fisierul
    60                                          ;fclose(file_descriptor)
    61 00000043 68[14000000]                    push dword file_descriptor
    62 00000048 FF15[00000000]                  call [fclose]
    63 0000004E 83C404                          add esp, 4
    64                                          ; exit(0)
    65 00000051 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 00000053 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
