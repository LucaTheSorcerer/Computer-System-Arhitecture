     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  extern printf, scanf ;add printf and scanf as extern functions 
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 00000000                    number1 dd 0 ;
    18 00000004 00000000                    number2 dd 0
    19 00000008 6E756D62657231203D-         message1 db "number1 = ", 0
    19 00000011 2000               
    20 00000013 6E756D62657232203D-         message2 db "number2 = ", 0
    20 0000001C 2000               
    21 0000001E 256400                      format db "%d", 0
    22 00000021 0000000000000000            result dq 0;
    23                                  
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 68[08000000]                    push dword message1
    29 00000005 FF15[00000000]                  call [printf]
    30 0000000B 83C404                          add esp, 4*1
    31                                          
    32 0000000E 68[00000000]                    push dword number1
    33 00000013 68[1E000000]                    push dword format
    34 00000018 FF15[00000000]                  call [scanf]
    35 0000001E 83C408                          add esp, 4 * 2
    36                                          
    37 00000021 68[13000000]                    push dword message2
    38 00000026 FF15[00000000]                  call [printf]
    39 0000002C 83C404                          add esp, 4 * 1
    40                                          
    41 0000002F 68[04000000]                    push dword number2
    42 00000034 68[1E000000]                    push dword format
    43 00000039 FF15[00000000]                  call [scanf]
    44 0000003F 83C408                          add esp, 4 * 2
    45                                          
    46 00000042 B800000000                      mov eax, 0
    47 00000047 BA00000000                      mov edx, 0
    48 0000004C BB00000000                      mov ebx, 0
    49 00000051 B900000000                      mov ecx, 0
    50 00000056 A1[00000000]                    mov eax, [number1]
    51 0000005B 8B1D[04000000]                  mov ebx, [number2]
    52 00000061 F7EB                            imul ebx
    53 00000063 A3[21000000]                    mov [result+0], eax
    54 00000068 8915[25000000]                  mov [result+4], edx
    55                                          
    56 0000006E FF35[21000000]                  push dword [result]
    57 00000074 68[1E000000]                    push dword format
    58 00000079 FF15[00000000]                  call [printf]
    59 0000007F 83C404                          add esp, 4
    60                                          
    61                                          
    62                                      
    63                                          ; exit(0)
    64 00000082 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 00000084 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    66                                          
